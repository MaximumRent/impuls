package com.megapapa.impulse.entity.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.megapapa.impulse.entity.cayenne.IndividualTask;
import com.megapapa.impulse.entity.cayenne.Role;

/**
 * Class _User was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _User extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> EMAIL = Property.create("email", String.class);
    public static final Property<String> PASSWORD_HASH = Property.create("passwordHash", String.class);
    public static final Property<String> PASSWORD_SALT = Property.create("passwordSalt", String.class);
    public static final Property<String> USERNAME = Property.create("username", String.class);
    public static final Property<List<IndividualTask>> INDIVIDUAL_TASKS = Property.create("individualTasks", List.class);
    public static final Property<Role> ROLE = Property.create("role", Role.class);

    protected String email;
    protected String passwordHash;
    protected String passwordSalt;
    protected String username;

    protected Object individualTasks;
    protected Object role;

    public void setEmail(String email) {
        beforePropertyWrite("email", this.email, email);
        this.email = email;
    }

    public String getEmail() {
        beforePropertyRead("email");
        return this.email;
    }

    public void setPasswordHash(String passwordHash) {
        beforePropertyWrite("passwordHash", this.passwordHash, passwordHash);
        this.passwordHash = passwordHash;
    }

    public String getPasswordHash() {
        beforePropertyRead("passwordHash");
        return this.passwordHash;
    }

    public void setPasswordSalt(String passwordSalt) {
        beforePropertyWrite("passwordSalt", this.passwordSalt, passwordSalt);
        this.passwordSalt = passwordSalt;
    }

    public String getPasswordSalt() {
        beforePropertyRead("passwordSalt");
        return this.passwordSalt;
    }

    public void setUsername(String username) {
        beforePropertyWrite("username", this.username, username);
        this.username = username;
    }

    public String getUsername() {
        beforePropertyRead("username");
        return this.username;
    }

    public void addToIndividualTasks(IndividualTask obj) {
        addToManyTarget("individualTasks", obj, true);
    }

    public void removeFromIndividualTasks(IndividualTask obj) {
        removeToManyTarget("individualTasks", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<IndividualTask> getIndividualTasks() {
        return (List<IndividualTask>)readProperty("individualTasks");
    }

    public void setRole(Role role) {
        setToOneTarget("role", role, true);
    }

    public Role getRole() {
        return (Role)readProperty("role");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "email":
                return this.email;
            case "passwordHash":
                return this.passwordHash;
            case "passwordSalt":
                return this.passwordSalt;
            case "username":
                return this.username;
            case "individualTasks":
                return this.individualTasks;
            case "role":
                return this.role;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "email":
                this.email = (String)val;
                break;
            case "passwordHash":
                this.passwordHash = (String)val;
                break;
            case "passwordSalt":
                this.passwordSalt = (String)val;
                break;
            case "username":
                this.username = (String)val;
                break;
            case "individualTasks":
                this.individualTasks = val;
                break;
            case "role":
                this.role = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.email);
        out.writeObject(this.passwordHash);
        out.writeObject(this.passwordSalt);
        out.writeObject(this.username);
        out.writeObject(this.individualTasks);
        out.writeObject(this.role);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.email = (String)in.readObject();
        this.passwordHash = (String)in.readObject();
        this.passwordSalt = (String)in.readObject();
        this.username = (String)in.readObject();
        this.individualTasks = in.readObject();
        this.role = in.readObject();
    }

}
