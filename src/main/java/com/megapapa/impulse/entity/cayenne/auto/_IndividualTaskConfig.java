package com.megapapa.impulse.entity.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.megapapa.impulse.entity.cayenne.IndividualTask;

/**
 * Class _IndividualTaskConfig was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _IndividualTaskConfig extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<Short> NOTIFICATED = Property.create("notificated", Short.class);
    public static final Property<IndividualTask> INDIVIDUAL_TASK = Property.create("individualTask", IndividualTask.class);

    protected short notificated;

    protected Object individualTask;

    public void setNotificated(short notificated) {
        beforePropertyWrite("notificated", this.notificated, notificated);
        this.notificated = notificated;
    }

    public short getNotificated() {
        beforePropertyRead("notificated");
        return this.notificated;
    }

    public void setIndividualTask(IndividualTask individualTask) {
        setToOneTarget("individualTask", individualTask, true);
    }

    public IndividualTask getIndividualTask() {
        return (IndividualTask)readProperty("individualTask");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "notificated":
                return this.notificated;
            case "individualTask":
                return this.individualTask;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "notificated":
                this.notificated = val == null ? 0 : (short)val;
                break;
            case "individualTask":
                this.individualTask = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeShort(this.notificated);
        out.writeObject(this.individualTask);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.notificated = in.readShort();
        this.individualTask = in.readObject();
    }

}
