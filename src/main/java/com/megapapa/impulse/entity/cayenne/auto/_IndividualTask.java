package com.megapapa.impulse.entity.cayenne.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import com.megapapa.impulse.entity.cayenne.IndividualTaskConfig;
import com.megapapa.impulse.entity.cayenne.User;

/**
 * Class _IndividualTask was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _IndividualTask extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "id";

    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<LocalDateTime> END_LIMIT = Property.create("endLimit", LocalDateTime.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<LocalDateTime> STARTED_AT = Property.create("startedAt", LocalDateTime.class);
    public static final Property<List<IndividualTaskConfig>> INDIVIDUAL_TASK_CONFIGS = Property.create("individualTaskConfigs", List.class);
    public static final Property<User> USER = Property.create("user", User.class);

    protected String description;
    protected LocalDateTime endLimit;
    protected String name;
    protected LocalDateTime startedAt;

    protected Object individualTaskConfigs;
    protected Object user;

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setEndLimit(LocalDateTime endLimit) {
        beforePropertyWrite("endLimit", this.endLimit, endLimit);
        this.endLimit = endLimit;
    }

    public LocalDateTime getEndLimit() {
        beforePropertyRead("endLimit");
        return this.endLimit;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setStartedAt(LocalDateTime startedAt) {
        beforePropertyWrite("startedAt", this.startedAt, startedAt);
        this.startedAt = startedAt;
    }

    public LocalDateTime getStartedAt() {
        beforePropertyRead("startedAt");
        return this.startedAt;
    }

    public void addToIndividualTaskConfigs(IndividualTaskConfig obj) {
        addToManyTarget("individualTaskConfigs", obj, true);
    }

    public void removeFromIndividualTaskConfigs(IndividualTaskConfig obj) {
        removeToManyTarget("individualTaskConfigs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<IndividualTaskConfig> getIndividualTaskConfigs() {
        return (List<IndividualTaskConfig>)readProperty("individualTaskConfigs");
    }

    public void setUser(User user) {
        setToOneTarget("user", user, true);
    }

    public User getUser() {
        return (User)readProperty("user");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "description":
                return this.description;
            case "endLimit":
                return this.endLimit;
            case "name":
                return this.name;
            case "startedAt":
                return this.startedAt;
            case "individualTaskConfigs":
                return this.individualTaskConfigs;
            case "user":
                return this.user;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "description":
                this.description = (String)val;
                break;
            case "endLimit":
                this.endLimit = (LocalDateTime)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "startedAt":
                this.startedAt = (LocalDateTime)val;
                break;
            case "individualTaskConfigs":
                this.individualTaskConfigs = val;
                break;
            case "user":
                this.user = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.description);
        out.writeObject(this.endLimit);
        out.writeObject(this.name);
        out.writeObject(this.startedAt);
        out.writeObject(this.individualTaskConfigs);
        out.writeObject(this.user);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.description = (String)in.readObject();
        this.endLimit = (LocalDateTime)in.readObject();
        this.name = (String)in.readObject();
        this.startedAt = (LocalDateTime)in.readObject();
        this.individualTaskConfigs = in.readObject();
        this.user = in.readObject();
    }

}
